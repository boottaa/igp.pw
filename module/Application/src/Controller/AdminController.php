<?php
/**
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2016 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Application\Controller;

use Application\Model\FollowLinks;
use Application\Model\Links;
use Auth\Helpers\Session;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

class AdminController extends BaseController
{
    public function onDispatch(MvcEvent $e)
    {
        if($this->getUserId() == 0){
            return $this->redirect()->toRoute('igp', ['action' => 'login']);
        }
        $this->layout()->setTemplate('layout/admin');

        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $userId = $this->getUserId();
        $fl = iterator_to_array($this->followLinks->getCount($userId));
        $colors = '';
        if(!empty($fl)){
            foreach ($fl as $item){
                if($item['count'] > 0 ){
                    $green = 255 - $item['count'] * 2;
                    if($green < 100) $green = 100;
                    $colors .= $item['code_region'].": ". "'rgb(0, {$green}, 58)', ";
                }
            }
        }

        $flTable = iterator_to_array($this->links->followLinks()->getFollowLinks($userId));
        $totalLinks = $this->links->countUserLinks($userId)['c'];
        //https://www.10bestdesign.com/jqvmap/
        return new ViewModel(["colorMap" => $colors, "fl_table" => $flTable, "totalLinks" => $totalLinks]);
    }

    public function getHistorys()
    {
        $userId = $this->getUserId();
        if ($userId != 0) {
            try {
                $items = iterator_to_array($this->links->fetchAll(['user_id' => $userId]));
                array_walk($items, function (&$item) use ($userId) {
                    $item['date_time'] = date('d.m.Y', strtotime($item['date_time']));
                    $item['source'] = urldecode($item['source']);
                    $item['new'] = "https://" . $_SERVER['HTTP_HOST'] . "/" . $item['new'];
                    $item['activity'] = $this->followLinks->getForTableActivity($userId, $item['id']);
                });
                return $items;
            } catch (\Exception $e) {
                return null;
            }
        }
    }

    public function mylinksAction(){
        $userId = $this->getUserId();
        $totalLinks = $this->links->countUserLinks($userId)['c'];

        return new ViewModel(['historys' =>  $this->getHistorys(), 'totalLinks' => $totalLinks]);
    }

    public function portfolioAction(){
        $userId = $this->getUserId();
        $totalLinks = $this->links->countUserLinks($userId)['c'];

        return new ViewModel(['totalLinks' => $totalLinks]);
    }

    //AXAJ
    public function activityAction()
    {
        $userId = $this->getUserId();
        $link_id = $this->params()->fromRoute('id', 0);

        $data = [];
        foreach ($this->links->followLinks()->getForTableActivity($userId, $link_id) as $item){
            $data[] = [$item['date'], (int) $item['count']];
        };
        
        echo json_encode($data, JSON_UNESCAPED_SLASHES);
        die();
    }

    //AXAJ
    public function deleteAction()
    {
        $res = false;
        try{
            $userId = $this->getUserId();
            $link_id = $this->params()->fromRoute('id', 0);

            $where = [
                'id' => $link_id,
                'user_id' => $userId,
                'is_deleted' => '0'
            ];

            if($this->links->getOnly($where)){
                $this->links->delete(['id' => $link_id]);
                $this->followLinks->delete(['link_id' => $link_id]);

                $res = true;
            }
        }catch (\Exception $e){

        }
        die($res);
    }
}
